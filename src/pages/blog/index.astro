---
import BaseHead from "../../components/BaseHead.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../../consts";
import { getCollection } from "astro:content";
import FormattedDate from "../../components/FormattedDate.astro";

const posts = (await getCollection("blog")).sort(
	(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
);

// Group posts by year
const postsByYear = posts.reduce(
	(acc, post) => {
		const year = post.data.pubDate.getFullYear();
		if (!acc[year]) acc[year] = [];
		acc[year].push(post);
		return acc;
	},
	{} as Record<number, typeof posts>,
);

const years = Object.keys(postsByYear).sort((a, b) => Number(b) - Number(a));
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead
			title={SITE_TITLE + " | Blog"}
			description={SITE_DESCRIPTION}
		/>
		<link
			href="https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:wght@400;500;600;700;800&display=swap"
			rel="stylesheet"
		/>
	</head>
	<body>
		<Header />
		<main>
			<div class="hero-section">
				<div class="container">
					<h1>Latest Insights</h1>
					<p>
						Expert perspectives on digital transformation, business
						growth, and technology trends.
					</p>
					<div class="search-box">
						<svg
							width="20"
							height="20"
							viewBox="0 0 24 24"
							fill="none"
							stroke="currentColor"
							stroke-width="2"
						>
							<circle cx="11" cy="11" r="8"></circle>
							<line x1="21" y1="21" x2="16.65" y2="16.65"></line>
						</svg>
						<input
							type="text"
							id="search-input"
							placeholder="Search articles..."
						/>
					</div>
				</div>
			</div>

			<div class="container posts-container grid-view" id="posts-container">
				<div class="filters">
					<div class="view-toggle">
						<button class="view-btn active" data-view="grid">
							<svg
								width="20"
								height="20"
								viewBox="0 0 24 24"
								fill="none"
								stroke="currentColor"
								stroke-width="2"
							>
								<rect x="3" y="3" width="7" height="7"></rect>
								<rect x="14" y="3" width="7" height="7"></rect>
								<rect x="14" y="14" width="7" height="7"></rect>
								<rect x="3" y="14" width="7" height="7"></rect>
							</svg>
						</button>
						<button class="view-btn" data-view="list">
							<svg
								width="20"
								height="20"
								viewBox="0 0 24 24"
								fill="none"
								stroke="currentColor"
								stroke-width="2"
							>
								<line x1="3" y1="12" x2="21" y2="12"></line>
								<line x1="3" y1="6" x2="21" y2="6"></line>
								<line x1="3" y1="18" x2="21" y2="18"></line>
							</svg>
						</button>
					</div>
				</div>
				<div class="posts-container grid-view">
					{
						years.map((year) => (
							<div class="year-section">
								<h2>{year}</h2>
								<div class="blog-grid">
									{postsByYear[Number(year)].map((post) => (
										<article class="blog-card">
											{post.data.heroImage && (
												<a
													class="image-link"
													href={`/blog/${post.id}/`}
												>
													{console.log(
														post.data.heroImage,
													)}
													<img
														width="720"
														height="360"
														src={
															post.data.heroImage
														}
														alt={post.data.title}
													/>
												</a>
											)}
											<div class="card-content">
												<div class="post-meta">
													<time
														datetime={post.data.pubDate.toISOString()}
													>
														<svg
															width="18"
															height="18"
															viewBox="0 0 24 24"
															fill="none"
															stroke="currentColor"
															stroke-width="2"
														>
															<rect
																x="3"
																y="4"
																width="18"
																height="18"
																rx="2"
																ry="2"
															/>
															<line
																x1="16"
																y1="2"
																x2="16"
																y2="6"
															/>
															<line
																x1="8"
																y1="2"
																x2="8"
																y2="6"
															/>
															<line
																x1="3"
																y1="10"
																x2="21"
																y2="10"
															/>
														</svg>
														<FormattedDate
															date={
																post.data
																	.pubDate
															}
														/>
													</time>
												</div>
												<h3 class="title">
													<a
														href={`/blog/${post.id}/`}
													>
														{post.data.title}
													</a>
												</h3>
												<p class="description">
													{post.data.description}
												</p>
												<a
													href={`/blog/${post.id}/`}
													class="read-more"
												>
													Read Article
													<svg
														width="20"
														height="20"
														viewBox="0 0 24 24"
														fill="none"
														stroke="currentColor"
														stroke-width="2"
													>
														<line
															x1="5"
															y1="12"
															x2="19"
															y2="12"
														/>
														<polyline points="12 5 19 12 12 19" />
													</svg>
												</a>
											</div>
										</article>
									))}
								</div>
							</div>
						))
					}
				</div>
			</div>

			<div class="lead-form-container">
				<form
					name="medical-lead"
					method="POST"
					data-netlify="true"
					class="medical-lead-form"
				>
					<h3>Get a Free Treatment Cost Estimate</h3>
					<p class="form-description">
						Fill out this form and our medical experts will contact
						you with a detailed cost estimate.
					</p>

					<div class="form-group">
						<input
							type="text"
							name="name"
							placeholder="Full Name"
							required
							class="form-input"
						/>
					</div>

					<div class="form-group">
						<input
							type="email"
							name="email"
							placeholder="Email"
							required
							class="form-input"
						/>
					</div>

					<div class="form-group">
						<input
							type="text"
							name="country"
							placeholder="Country"
							required
							class="form-input"
						/>
					</div>

					<div class="form-group">
						<textarea
							name="condition"
							placeholder="Brief about your condition"
							required
							class="form-input form-textarea"
							rows="4"></textarea>
					</div>

					<button type="submit" class="form-submit">
						<span>Get Free Estimate</span>
						<svg
							width="20"
							height="20"
							viewBox="0 0 24 24"
							fill="none"
							stroke="currentColor"
							stroke-width="2"
						>
							<line x1="5" y1="12" x2="19" y2="12"></line>
							<polyline points="12 5 19 12 12 19"></polyline>
						</svg>
					</button>
				</form>
			</div>
		</main>
		<Footer />

		<script>
			// View Toggle
			const viewBtns = document.querySelectorAll(".view-btn");
			const postsContainer = document.querySelector(".posts-container");

			viewBtns.forEach((btn) => {
				btn.addEventListener("click", () => {
					const view = (btn as HTMLElement).getAttribute("data-view");
					viewBtns.forEach((b) => b.classList.remove("active"));
					btn.classList.add("active");
					postsContainer?.classList.remove("grid-view", "list-view");
					postsContainer?.classList.add(`${view}-view`);
				});
			});

			// Category Filter
			const filterBtns = document.querySelectorAll(".filter-btn");
			filterBtns.forEach((btn) => {
				btn.addEventListener("click", () => {
					filterBtns.forEach((b) => b.classList.remove("active"));
					btn.classList.add("active");
				});
			});

			// Search functionality
			const searchInput = document.getElementById(
				"search-input",
			) as HTMLInputElement;
			const blogCards = document.querySelectorAll(".blog-card");

			searchInput?.addEventListener("input", (e) => {
				const searchTerm = (
					e.target as HTMLInputElement
				).value.toLowerCase();

				blogCards.forEach((card) => {
					const title =
						card
							.querySelector(".title")
							?.textContent?.toLowerCase() || "";
					const description =
						card
							.querySelector(".description")
							?.textContent?.toLowerCase() || "";

					if (
						title.includes(searchTerm) ||
						description.includes(searchTerm)
					) {
						(card as HTMLElement).style.display = "";
					} else {
						(card as HTMLElement).style.display = "none";
					}
				});
			});

			// Newsletter Form
			const newsletterForm = document.querySelector(".newsletter-form");
			newsletterForm?.addEventListener("submit", (e) => {
				e.preventDefault();
				const btn = newsletterForm.querySelector("button");
				if (btn) {
					btn.textContent = "Subscribed!";
					setTimeout(() => {
						const span = document.createElement("span");
						span.textContent = "Subscribe";
						const svg = btn.querySelector("svg")?.cloneNode(true);
						btn.textContent = "";
						btn.appendChild(span);
						if (svg) btn.appendChild(svg);
					}, 2000);
				}
			});

			document.addEventListener("DOMContentLoaded", () => {
				const viewButtons = document.querySelectorAll(".view-btn");
				const postsContainer =
					document.getElementById("posts-container");

				viewButtons.forEach((btn) => {
					btn.addEventListener("click", () => {
						// Remove active class from all buttons
						viewButtons.forEach((b) =>
							b.classList.remove("active"),
						);
						btn.classList.add("active");

						// Toggle container class
						const view = btn.dataset.view;
						postsContainer.classList.toggle(
							"grid-view",
							view === "grid",
						);
						postsContainer.classList.toggle(
							"list-view",
							view === "list",
						);
					});
				});
			});
		</script>

		<style>
			main {
				background: var(--bg);
				min-height: 100vh;
			}

			.container {
				max-width: 1200px;
				margin: 0 auto;
				padding: 0 1.5rem;
			}

			.hero-section {
				background: linear-gradient(135deg, var(--card-bg), var(--bg));
				padding: 4rem 0;
				text-align: center;
				border-bottom: 1px solid var(--border);
			}

			.hero-section h1 {
				font-size: clamp(2rem, 5vw, 3rem);
				margin-bottom: 1rem;
				background: linear-gradient(
					135deg,
					var(--text),
					var(--primary)
				);
				-webkit-background-clip: text;
				background-clip: text;
				-webkit-text-fill-color: transparent;
			}

			.hero-section p {
				color: var(--text-muted);
				font-size: clamp(1rem, 2vw, 1.25rem);
				max-width: 600px;
				margin: 0 auto 2rem;
			}

			.search-box {
				max-width: 500px;
				margin: 0 auto;
				position: relative;
			}

			.search-box svg {
				position: absolute;
				left: 1rem;
				top: 50%;
				transform: translateY(-50%);
				color: var(--text-muted);
			}

			.posts-container.grid-view .blog-grid {
				display: grid;
				grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
				gap: 2rem;
			}

			.posts-container.list-view .blog-grid {
				display: flex;
				flex-direction: column;
				gap: 2rem;
			}

			.blog-card {
				border: 1px solid #eee;
				border-radius: 12px;
				overflow: hidden;
				background: #fff;
				display: flex;
				flex-direction: column;
				transition: all 0.3s ease;
			}

			.posts-container.list-view .blog-card {
				flex-direction: row;
			}

			.view-btn.active {
				background-color: #000;
				color: #fff;
				border-radius: 8px;
			}

			.posts-container.list-view .blog-card .image-link {
				flex-shrink: 0;
				width: 240px;
				height: auto;
			}

			.posts-container.list-view .blog-card img {
				object-fit: cover;
				width: 100%;
				height: 100%;
			}

			.posts-container.list-view .blog-card .card-content {
				padding: 1rem;
			}

			.search-box input {
				width: 100%;
				padding: 1rem 1rem 1rem 3rem;
				border: 1px solid var(--border);
				border-radius: var(--radius);
				background: var(--card-bg);
				color: var(--text);
				font-size: 1rem;
				transition: var(--transition);
			}

			.search-box input:focus {
				outline: none;
				border-color: var(--primary);
				box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
			}

			.filters {
				display: flex;
				justify-content: end;
				align-items: center;
				margin: 3rem 0 2rem;
				gap: 1rem;
			}

			.categories {
				display: flex;
				gap: 0.5rem;
				overflow-x: auto;
				padding-bottom: 0.5rem;
				-ms-overflow-style: none;
				scrollbar-width: none;
			}

			.categories::-webkit-scrollbar {
				display: none;
			}

			.filter-btn {
				padding: 0.5rem 1rem;
				border: 1px solid var(--border);
				border-radius: var(--radius);
				background: var(--card-bg);
				color: var(--text-muted);
				font-size: 0.9rem;
				cursor: pointer;
				transition: var(--transition);
				white-space: nowrap;
			}

			.filter-btn:hover,
			.filter-btn.active {
				background: var(--primary);
				color: white;
				border-color: var(--primary);
			}

			.view-toggle {
				display: flex;
				gap: 0.5rem;
			}

			.view-btn {
				padding: 0.5rem;
				border: 1px solid var(--border);
				border-radius: var(--radius);
				background: var(--card-bg);
				color: var(--text-muted);
				cursor: pointer;
				transition: var(--transition);
			}

			.view-btn:hover,
			.view-btn.active {
				background: var(--primary);
				color: white;
				border-color: var(--primary);
			}

			.year-section {
				margin-bottom: 3rem;
			}

			.year-section h2 {
				font-size: 1.5rem;
				margin-bottom: 1.5rem;
				color: var(--text-muted);
			}

			.blog-grid {
				display: grid;
				gap: 2rem;
				grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
			}

			.list-view .blog-grid {
				grid-template-columns: 1fr;
			}

			.list-view .blog-card {
				display: grid;
				grid-template-columns: 300px 1fr;
				gap: 2rem;
			}

			.blog-card {
				background: var(--card-bg);
				border-radius: var(--radius);
				overflow: hidden;
				border: 1px solid var(--border);
				transition: var(--transition);
			}

			.blog-card:hover {
				transform: translateY(-5px);
				box-shadow: var(--shadow);
			}

			.image-link {
				display: block;
				position: relative;
				padding-top: 50%;
			}

			.image-link img {
				position: absolute;
				top: 0;
				left: 0;
				width: 100%;
				height: 100%;
				object-fit: cover;
				transition: var(--transition);
			}

			.blog-card:hover .image-link img {
				transform: scale(1.05);
			}

			.card-content {
				padding: 1.5rem;
			}

			.post-meta {
				display: flex;
				align-items: center;
				gap: 1rem;
				margin-bottom: 1rem;
				font-size: 0.9rem;
				color: var(--text-muted);
			}

			time {
				display: flex;
				align-items: center;
				gap: 0.5rem;
			}

			.category {
				background: var(--bg);
				padding: 0.25rem 0.75rem;
				border-radius: 999px;
				font-size: 0.8rem;
			}

			.title {
				font-size: 1.5rem;
				margin-bottom: 0.75rem;
				line-height: 1.3;
			}

			.title a {
				color: var(--text);
				text-decoration: none;
				transition: var(--transition);
			}

			.title a:hover {
				color: var(--primary);
			}

			.description {
				color: var(--text-muted);
				margin-bottom: 1.5rem;
				line-height: 1.6;
			}

			.read-more {
				display: inline-flex;
				align-items: center;
				gap: 0.5rem;
				color: var(--primary);
				font-weight: 600;
				text-decoration: none;
				transition: var(--transition);
			}

			.read-more svg {
				transition: transform 0.2s ease;
			}

			.read-more:hover svg {
				transform: translateX(5px);
			}

			.newsletter-section {
				background: var(--card-bg);
				padding: 4rem 0;
				text-align: center;
				border-top: 1px solid var(--border);
			}

			.newsletter-section h2 {
				font-size: 2rem;
				margin-bottom: 1rem;
			}

			.newsletter-section p {
				color: var(--text-muted);
				margin-bottom: 2rem;
			}

			.newsletter-form {
				display: flex;
				gap: 1rem;
				max-width: 500px;
				margin: 0 auto;
			}

			.newsletter-form input {
				flex: 1;
				padding: 0.75rem 1rem;
				border: 1px solid var(--border);
				border-radius: var(--radius);
				background: var(--bg);
				color: var(--text);
				font-size: 1rem;
			}

			.newsletter-form input:focus {
				outline: none;
				border-color: var(--primary);
				box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
			}

			.newsletter-form .btn {
				display: inline-flex;
				align-items: center;
				gap: 0.5rem;
				padding: 0.75rem 1.5rem;
				background: var(--primary);
				color: white;
				border: none;
				border-radius: var(--radius);
				font-weight: 600;
				cursor: pointer;
				transition: var(--transition);
			}

			.newsletter-form .btn:hover {
				background: var(--accent);
			}

			.lead-form-container {
				padding: 2rem;
				background: var(--card-bg);
				border-radius: var(--radius);
				border: 1px solid var(--border);
				box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
				height: fit-content;
				max-width: 600px;
				margin: 4rem auto;
			}

			.medical-lead-form {
				display: flex;
				flex-direction: column;
				gap: 1.5rem;
			}

			.form-group {
				display: flex;
				flex-direction: column;
				gap: 0.5rem;
			}

			.form-input {
				width: 100%;
				padding: 0.75rem 1rem;
				border: 1px solid var(--border);
				border-radius: var(--radius);
				background: var(--bg);
				color: var(--text);
				font-size: 1rem;
				transition: var(--transition);
			}

			.form-input:focus {
				outline: none;
				border-color: var(--primary);
				box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
			}

			.form-textarea {
				resize: vertical;
				min-height: 100px;
			}

			.form-submit {
				display: inline-flex;
				align-items: center;
				justify-content: center;
				gap: 0.5rem;
				padding: 0.75rem 1.5rem;
				background: var(--primary);
				color: white;
				border: none;
				border-radius: var(--radius);
				font-size: 1rem;
				font-weight: 600;
				cursor: pointer;
				transition: var(--transition);
			}

			.form-submit:hover {
				background: var(--accent);
				transform: translateY(-1px);
			}

			.form-submit svg {
				transition: transform 0.2s ease;
			}

			.form-submit:hover svg {
				transform: translateX(5px);
			}

			.medical-lead-form h3 {
				font-size: 2rem;
				text-align: center;
				margin-bottom: 0.5rem;
				background: linear-gradient(
					135deg,
					var(--primary),
					var(--accent)
				);
				-webkit-background-clip: text;
				background-clip: text;
				-webkit-text-fill-color: transparent;
			}

			@media (max-width: 768px) {
				.filters {
					flex-direction: column;
					align-items: flex-end;
				}

				.list-view .blog-card {
					grid-template-columns: 1fr;
				}

				.newsletter-form {
					flex-direction: column;
					padding: 0 1rem;
				}

				.newsletter-form .btn {
					width: 100%;
					justify-content: center;
				}
			}

			@media (prefers-reduced-motion: reduce) {
				.blog-card,
				.image-link img,
				.read-more svg {
					transition: none;
				}
			}
		</style>
	</body>
</html>
